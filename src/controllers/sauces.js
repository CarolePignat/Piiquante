// Importing "Sauces" model
const Sauces = require("../models/Sauces");

// Module allowing access and interaction with the file system
const fs = require("fs");


// CREATING NEW SAUCE : 'POST'

exports.createSauce = (req, res) => {
    const sauceObject = JSON.parse(req.body.sauce);

    // 'id' automatically generated by the database -> deleting sauce's 'id'
    delete sauceObject._id;

    // Deleting "userId" field: we cannot trust the client & has to be replaced by the token's userId
    delete sauceObject._userId;

    const sauces = new Sauces({
        ...sauceObject,   // 'spread = ...' function : recovering all the properties of the sauce
        userId: req.auth.userId,

        // Complete URL: 'http', server host (localhost:3000), directory, name of the file
        imageURL: `${req.protocol}://${req.get('host')}/images/${req.file.filename}`,
        likes: 0,
        dislikes: 0,
        usersLiked: [],
        usersDisliked: [],
    });

    // Registering the sauce in the database
    sauces
        .save()
        .then(() => res.status(201).json({ message: 'Sauce enregistrée !' }))
        .catch((error) => res.status(500).json({ error }));
};

// MODIFYING A SAUCE : 'UPDATE'

exports.modifySauce = (req, res) => {

    // Verifying the existence of a field 'file' (image)
    const sauceObject = req.file ? {

        // If the image exists
        ...JSON.parse(req.body.sauce),
        imageURL: `${req.protocol}://${req.get('host')}/images/${req.file.filename}`,
    } : 
    { ...req.body };

    // If image doesn't exist
    delete sauceObject._userId;
    Sauces.findOne({ _id: req.params.id })
        .then((sauce) => {
            if (sauce.userId != req.auth.userId) {
                res.status(401).json({ message: 'Non autorisé !' })
            } else {
                Sauces.updateOne(
                    { _id: req.params.id },
                    { ...sauceObject, _id: req.params.id }
                )
                .then(() => res.status(200).json({ message: 'Sauce modifiée !' }))
                .catch((error) => res.status(500).json({ error }));
            }
        })
        .catch((error) => res.status(500).json({ error }));
};


// DELETING A SAUCE : 'DELETE'

exports.deleteSauce = (req, res) => {
    
    // Showing the sauce with same 'id' as the one of the request
    Sauces.findOne({ _id: req.params.id })
        .then((sauces) => {

            // Verification if user who wants to delete the sauce is the same as the one who created it
            if (sauces.userId != req.auth.userId) {
                res.status(401).json({ message: 'Non autorisé !' });
            } else {

                // Recovery of the filename
                const filename = sauces.imageUrl.split('/images')[1];

                // Use of 'unlink' function from 'fs' package to delete the Sauce & the Image
                fs.unlink(`/images/${filename}`, () => {
                    Sauces.deleteOne({ _id: req.params.id })
                        .then(() => res.status(200).json({ message: 'Sauce supprimée !' }))
                        .catch((error) => res.status(500).json({ error }));
                });
            }
        })
        .catch((error) => res.status(500).json({ error }));
};


// SHOWING SAUCE THANKS TO ITS 'ID'

exports.getOneSauce = (req, res) => {

    Sauces.findOne({ _id: req.params.id })
        .then((sauces) => res.status(200).json(sauces))
        .catch((error) => res.status(500).json({ error }));
};


// SHOWING AN ARRAY WITH ALL SAUCES

exports.getAllSauces = (req, res) => {

    Sauces.find()
        .then((sauces) => res.status(200).json(sauces))
        .catch((error) => res.status(500).json({ error }));
};


// MANAGING "LIKES" AND "DISLIKES"

exports.likeSauce = (req, res) => {
    const like = req.body.like;
    const userId = req.body.userId;

    if (like === 1) {
        Sauces.findOne({ _id: req.params.id })
            .then((sauces) => {
                if (sauces.usersLiked.includes(req.body.userId)) {
                    res.status(401).json({ message: 'Action non autorisée !' });
                } else {
                    Sauces.updateOne(
                        { _id: req.params.id },
                        {
                            $push: { usersLiked: req.body.userId },
                            $inc: { likes: +1 },
                        }
                    )
                    .then(() => res.status(200).json({ message: 'Sauce likée !' }))
                    .catch((error) => res.status(500).json({ error }));
                }
            })
            .catch((error) => res.status(500).json({ error }));
    }

    if (like === -1) {
        Sauces.findOne({ _id: req.params.id })
            .then((sauces) => {
                if (sauces.usersDisliked.includes(req.body.userId)) {
                    res.status(401).json({ message: 'Action non autorisée !' });
                } else {
                    Sauces.updateOne(
                        { _id: req.params.id },
                        {
                            $push: { usersDisliked: req.body.userId },
                            $inc: { dislikes: +1 },
                        }
                    )
                    .then(() => res.status(200).json({ message: 'Sauce dislikée !' }))
                    .catch((error) => res.status(500).json({ error }));
                }
            })
            .catch((error) => res.status(500).json({ error }));
    }

    if (like === 0) {
        Sauces.findOne({ _id: req.params.id })
            .then((sauces) => {
                if (sauces.usersLiked.includes(req.body.userId)) {
                    Sauces.updateOne(
                        { _id: req.params.id },
                        {
                            $pull: { usersLiked: req.body.userId },
                            $inc: { likes: -1 },
                        }
                    )
                    .then(() => res.status(200).json({ message: 'Like supprimé !' }))
                    .catch((error) => res.status(500).json({ error }));
                }

                if (sauces.usersDisliked.includes(req.body.userId)) {
                    Sauces.updateOne(
                        { _id: req.params.id },
                        {
                            $pull: { usersDisliked: req.body.userId },
                            $inc: { dislikes: - 1 },
                        }
                    )
                    .then(() => res.status(200).json({ message: 'Dislike supprimé !' }))
                    .catch((error) => res.status(500).json({ error }));
                }
            })
            .catch((error) => res.status(500).json({ error }));
    }
};